#target illustrator// var file = new File("JSON.jsx");// file.open('r');// eval(file.read());// file.close();#include "JSON.jsx"var file = File.saveDialog('Save Coordinates to File',"Txt Files: *.json");if (file){    file.open('w');    // var dict = serializeDocument(app.activeDocument);    // file.write(dict.toSource().replace(/[\(\)]/gi,""));    file.write(JSON.stringify(serializeDocument(app.activeDocument), null, 4));    file.close();}function getCenterPos(obj) {    var doc = app.activeDocument;    var hasArtCoords = app.coordinateSystem == CoordinateSystem.ARTBOARDCOORDINATESYSTEM;    var width = obj.width || doc.width;    var height = obj.height || doc.height;    var pos = obj.position || [0, 0];    pos = hasArtCoords ? doc.convertCoordinate (pos, CoordinateSystem.ARTBOARDCOORDINATESYSTEM, CoordinateSystem.DOCUMENTCOORDINATESYSTEM) : pos;    return [Math.round(pos[0] + 0.5 * width), Math.round(-pos[1] + 0.5 * height)];}function serializeSprite(obj, flags) {    var output = {};    output.type = "spr";    output.name = obj.name.split(':')[0];    output.fileName = obj.file.name;    output.pos = getCenterPos(obj);    output.size = [Math.round(obj.width), Math.round(obj.height)];    return output;}function serializeLabel(obj, flags) {    var output = {};    output.type = "lbl";    output.name = obj.name.split(':')[0];    output.flags = flags;    var textRange = obj.textRange;    output.fontName = textRange.textFont.name;    output.fontSize = textRange.size;    output.text = obj.contents;    output.pos = getCenterPos(obj);    output.size = [Math.round(obj.width), Math.round(obj.height)];    output.color = [textRange.fillColor.red / 255, textRange.fillColor.green / 255, textRange.fillColor.blue / 255, obj.opacity / 100];    var ah;    switch (textRange.justification) {        case Justification.CENTER:            ah = "center";        break;        case Justification.LEFT:            ah = "left";        break;        case Justification.RIGHT:            ah = "right";        break;    }    output.alignment = ah;    return output;}function serializeButton(obj, flags) {    var output = {};    output.type = "btn";    output.name = obj.name.split(':')[0];    output.pos = getCenterPos(obj);    output.size = [Math.round(obj.width), Math.round(obj.height)];    output.flags = flags;    if (obj.typename == "GroupItem") {        var group = serializeGroup(obj);        var itms = group.children;        for (var i = 0; i < itms.length; i++) {            var item = itms[i];            switch (item.name) {                case "normal":                    output.normalSprite = item;                    item.name = "";                break;                case "active":                    output.activeSprite = item;                    item.name = "";                break;                case "disabled":                    output.disabledSprite = item;                    item.name = "";                break;                case "label":                    output.label = item;                    item.name = "";                break;                default:                    output.children = output.children || new Array();                    output.children.push(item);            }        }    }    else if (obj.typename == "PlacedItem") {        output.normalSprite = {type : "spr", name : "", fileName : obj.file.name, pos : output.pos, size : output.size};    }    return output;}function serializeGroup(obj, flags) {    var itms = obj.pageItems;    var output = {};    output.type = "grp";    output.name = obj.name.split(':')[0];    output.pos = getCenterPos(obj);    output.size = [Math.round(obj.width), Math.round(obj.height)];    output.children = [];    for (var i = 0; i < itms.length; i++) {        output.children.push(serialize(itms[i]));    }    return output;}function serialize(item) {    var object_class;    var object_flags = "";    // derive class from item type    switch (item.typename) {        case "GroupItem":        case "Layer":            object_class = "grp";        break;                case "TextFrame":            object_class = "lbl";        break;                case "PlacedItem":            object_class = "spr";        break;    }    var params_data = item.name;    if (params == "") {        params_data = "nil";    }    var params = params_data.split(":"[0]);    var object_name = params[0];    var object_class = params[1] || object_class;    var object_flags = params[2] || object_flags;    switch(object_class) {        case 'spr':            return serializeSprite(item, object_flags);        case 'grp':            return serializeGroup(item, object_flags);        case 'lbl':            return serializeLabel(item, object_flags);        case 'btn':            return serializeButton(item, object_flags);    }}function serializeDocument(doc) {    var out = {};    var layers = doc.layers;    var allItems = [];    for (var i = 0; i < layers.length; i++) {        var pageItems = layers[i].pageItems;        for (var j = 0; j < pageItems.length; j++) {            allItems.push(pageItems[j]);        }    }    out.size = [doc.width, doc.height];    out.layout = [];    // pageItems and layers do not preserve zOrder properly.     // but currently selected items are always sorted in zOrder    doc.selection = allItems;    for (var i = doc.selection.length - 1; i >= 0; i--) {        out.layout.push(serialize(doc.selection[i]));    }    doc.selection = null;    return out;}